@inject IClient http;
@inject ProvinceContainer provinces;
@inject SessionService storage;

@code{
	[Parameter] public GameInfo Info { get; set; } = new GameInfo();
	[Parameter] public Action<View, int?, int?> Switch { get; set; } = ((a, x, y) => { });
	[Parameter] public bool Preview { get; set; }
	[Parameter] public Func<Task> LogoutAsync { get; set; } = () => Task.CompletedTask;
	[Parameter] public List<ProvinceDisplay>? Provinces { get; set; }
	TimeSpan TimeToStart = TimeSpan.Zero;
	int PlayerMoney = 0;
	int? Selected = null;
	Map? map;
	System.Timers.Timer? UnselectingTimer = null, CountdownTimer = null;
	Winner? Winner = null;
	async Task OnClickAsync(int i)
	{
		if (Info.A && Info.S == Game.State.Started)
		{
			var s = await http.PostAsync<Data.Click, Data.Switch>("api/Switch/Clicked", new Data.Click(storage.Player, Selected, i, storage.GameId));
			Switch(s.View, s.From, s.To);
			Selected = s.Select;
			map?.Select(Selected);

			UnselectingTimer?.Stop();
			UnselectingTimer = new System.Timers.Timer { Interval = 5000, AutoReset = false, Enabled = true };
			UnselectingTimer.Elapsed += (sender, args) => map?.Select(Selected = null);
		}
	}
	async Task NextTurnAsync()
	{
		await http.PostAsync<Data.Session>("api/Command/NextTurn", storage.Session);
		await ReloadAsync(Info);
	}
	public async Task ReloadAsync(GameInfo info)
	{
		Info = info;
		CountdownTimer?.Stop();

		PlayerMoney = await http.PostAsync<PlayerId, int>("api/Player/Money", new PlayerId(storage.Player, storage.GameId));
		await provinces.UpdateAsync(Preview ? "api/Provinces/Preview" : "api/Provinces/Current", storage.GameId);

		if (Info.S == Game.State.Countdown)
		{
			TimeToStart = await http.PostAsync<int, DateTimeOffset>("api/Game/StartTime", storage.GameId) - DateTimeOffset.UtcNow;
			CountdownTimer = new System.Timers.Timer { Interval = 1000 };
			CountdownTimer.Elapsed += (sender, args) =>
			{
				TimeToStart = TimeToStart.Subtract(TimeSpan.FromMilliseconds(1000));
				StateHasChanged();
			};
			CountdownTimer.Start();
		}
		else if (Info.S == Game.State.Finished)
		{
			Winner = await http.PostAsync<int, Winner?>("api/Game/Winner", storage.GameId);
		}
		StateHasChanged();
	}
	protected override Task OnInitializedAsync() => ReloadAsync(Info);
}
<nav>
	@if (Preview)
	{
		<a @onclick="() => Switch(View.Map, null, null)">Zpět</a>
		<a class="this">Náhled</a>
	}
	else
	{
		@if (Info.A && Info.S == Game.State.Started)
		{
			<a @onclick="NextTurnAsync">Konec</a>
		}
		else
		{
			<a @onclick="LogoutAsync">Odhlášení</a>
		}
		<a class="this">@PlayerMoney@Sym.Money</a>
		<a @onclick="() => Switch(View.Statistics, null, null)">Hráči</a>
		<a @onclick="() => Switch(View.Preview, null, null)">Náhled</a>
	}
</nav>
<main>
	@if (Info.S == Game.State.Created)
	{
		<p>Zatím jsi jediný zaregistrovaný hráč, počkej prosím na další</p>
	}
	else if (Info.S == Game.State.Countdown)
	{
		<p>Hra začne za @TimeToStart.ToString("mm\\:ss")</p>
	}
	else if (Info.S == Game.State.Finished)
	{
		<p>Hra již skončila</p>
		if (Winner is not null)
		{
			<p>Vítěz: <span style="color:@Winner.C">@Winner.N@Sym.Stars(Winner.F)</span></p>
		}
	}
	<Map @ref="map" Width="1000" Height="1000" Provinces="provinces" OnClickAsync="OnClickAsync" FontSize="9" SelectedColor="new Color(0, 0, 0, 100)" TextColor="(p, i) => p.GetColor()" />
</main>