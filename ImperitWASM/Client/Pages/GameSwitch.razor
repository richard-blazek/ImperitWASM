@inject IClient http;
@inject SessionService storage;

@code{
	[Parameter] public Func<Task>? LogoutAsync { get; set; }
	View Current;
	int? From = null, To = null;
	PlayerInfo? Player = null;
	Color PlayerColor = new Color();
	GameInfo Info = new GameInfo();
	System.Timers.Timer timer = new System.Timers.Timer(1000);
	GameMap? Map { get; set; }
	Task DoLogoutAsync()
	{
		timer.Stop();
		return LogoutAsync!();
	}
	void Switch(View mode = View.Map, int? from = null, int? to = null, PlayerInfo? player = null)
	{
		(Current, From, To, Player) = (mode, from, to, player);
		StateHasChanged();
	}
	async Task CheckGameInfoAsync()
	{
		var info = await http.PostAsync<PlayerId, GameInfo>("api/Game/Info", new PlayerId(storage.Player, storage.GameId));
		if (info != Info)
		{
			Info = info;
			await (Map?.ReloadAsync(Info) ?? Task.CompletedTask);
		}
	}
	protected override async Task OnInitializedAsync()
	{
		await CheckGameInfoAsync();
		PlayerColor = await http.PostAsync<int, Color>("api/Player/Color", storage.Player);
		timer.Elapsed += async (sender, e) => await CheckGameInfoAsync();
		timer.Start();
	}
}

<style>
	nav > a:hover {
		background-color: @PlayerColor.WithAlpha(96);
	}
	nav > a.this {
		background-color: @PlayerColor;
	}
</style>

@if (Current == View.Map)
{
	<GameMap @ref="Map" Info="Info" Switch="(x, y, z) => Switch(x, y, z, null)" Preview="false" LogoutAsync="DoLogoutAsync"/>
}
else if (Current == View.Preview)
{
	<GameMap Info="Info" Switch="(x, y, z) => Switch(x, y, z, null)" Preview="true" LogoutAsync="DoLogoutAsync"/>
}
else if (Current == View.Donation && Player is not null)
{
	<Donation Recipient="Player" Return="() => Switch()"/>
}
else if (Current == View.Move && From is int from && To is int to)
{
	<Move From="from" To="to" Return="() => Switch()"/>
}
else if (Current == View.Statistics)
{
	<Statistics Switch="Switch" LogoutAsync="DoLogoutAsync" GameState="Info.S"/>
}
else if (Current == View.Purchase && From is int from2)
{
	<Purchase Land="from2" Return="() => Switch()"/>
}
else if (Current == View.Recruit && From is int from3)
{
	<Recruitment Land="from3" Switch="x => Switch(x, null, null, null)"/>
}