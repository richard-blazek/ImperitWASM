@code{
	[Parameter] public ImmutableArray<Color> Players { get; set; }
	[Parameter] public ImmutableArray<Powers> Powers { get; set; }
	static IEnumerable<string> Parts(IEnumerable<int> y_values, int count, int max_y, int x_offset, int y_offset, int width, int height)
	{
		return y_values.Select((y, x) => ((long)x * width / (count - 1) + x_offset) + "," + ((long)height - y * height / max_y + y_offset));
	}
	static string Polyline(IEnumerable<int> y_values, int count, int max_y, int x_offset, int y_offset, int width, int height, bool reverse = false)
	{
		return max_y == 0 || count < 2 ? "" : string.Join(' ', Parts(y_values, count, max_y, x_offset, y_offset, width, height).ReverseIf(reverse));
	}
	static string ToString(double num) => num.ToString(CultureInfo.InvariantCulture);
}
@if (!Players.IsDefaultOrEmpty && Powers is { IsDefault: false, Length: > 3 })
{
	int TotalMax = Powers.Max(p => p.TotalMax);
	var TotalAvg = Powers.Select(p => p.TotalAvg);
	var Lives = Players.Select((_, i) => Math.Min(Powers.Length, Powers.Count(p => p[i].Alive) + 1)).ToImmutableArray();
	var Ratios = Powers.Select(p => p.Ratios).ToImmutableArray();
	var RatioOrder = Players.Indices().OrderByDescending(i => Ratios[^1][i]).ThenByDescending(i => Lives[i]).ToImmutableArray();
	var RatioSums = new double[Ratios.Length];
	var Changes = Powers.Zip(Powers.Skip(1), (prev, next) => next.ChangesFrom(prev).Index().MaxBy(pair => Math.Abs(pair.v))).ToImmutableArray();

	<p>Síla:</p>
	<svg viewBox="-10 -10 1220 620" class="diagram">
		@for (int i = 0; i < Players.Length; ++i)
		{
			<polyline points="@Polyline(Powers.Select(p => p[i].Total).Take(Lives[i]), Powers.Length, TotalMax, 0, 0, 1200, 600)" fill="none" stroke="@Players[i]" stroke-width="3"></polyline>
		}
		<polyline points="@Polyline(TotalAvg, Powers.Length, TotalMax, 0, 0, 1200, 600)" fill="none" stroke="#FFF" stroke-width="1"></polyline>
	</svg>
	<p>Poměrná změna síly:</p>
	<svg viewBox="-10 -10 1220 620" class="diagram">
		@for (int i = 0; i < Changes.Length; ++i)
		{
			<rect x="@ToString(i * 1200.0 / Changes.Length)" y="@ToString(Changes[i].v < 0.0 ? 300.0 : 300.0 * (1 - Changes[i].v))"
				width="@ToString(1200.0 / Changes.Length)" height="@ToString(Math.Abs(Changes[i].v) * 300.0)" fill="@Players[Changes[i].i]">
			</rect>
		}
	</svg>
	<p>Počet vojáků a peněz v poměru k ostatním hráčům:</p>
	<svg viewBox="0 0 1200 600" class="diagram">
		@for (int i = 0; i < RatioOrder.Length; ++i)
		{
			<polyline points="@(Polyline(RatioSums.Select(r => (int)(r * 2000)).Take(Math.Min(Lives[RatioOrder[i]] + 1, Ratios.Length)), Ratios.Length, 2000, 0, 0, 1200, 600) + " " +
								Polyline(RatioSums.Select((r, j) => (int)((r + Ratios[j][RatioOrder[i]]) * 2000)).Take(Math.Min(Lives[RatioOrder[i]] + 1, Ratios.Length)), Ratios.Length, 2000, 0, 0, 1200, 600, true))" fill="@Players[RatioOrder[i]]"></polyline>
			RatioSums.Each((_, j) => RatioSums[j] += Ratios[j][RatioOrder[i]]);
		}
	</svg>
}